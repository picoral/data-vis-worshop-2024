---
title: "Data Visualization -- Women's Hackathon 2024"
format: revealjs
---

```{python}
#| echo: false
#| eval: true
#| warning: false
#| message: false
import pandas as pd
import plotly.express as px
df = pd.read_csv("tidy-data/national_parks_data.csv")
```


## Data Visualization -- quarto dashboards + Plotly

Go to [https://bit.ly/vis2024](bit.ly/vis2024) to access these slides

![](images/bit.ly_vis2024.png)

Create free account (or log in) at [posit.cloud](https://posit.cloud/)

## Set up

* Go to [the GitHub repo](https://github.com/picoral/wh2024-data-vis)
* Click on the green `Code` button and copy the `SSH` url

![](images/ssh-github.png)

## Set up

* Sign in into [posit.cloud](https://posit.cloud/)
* Click on `New Project` and choose `New Project from Git Repository`

![](images/new-project.png)

## Set up

* Once the project opens, click on the `np-dashboard.qmd` file to open the quarto dashboard source code. The list of files is in the lower right panel

* Click on the green `run` button on the top right corner of the first code chunk

* A window will pop up to install some Python packages. Click on `Yes`

## Installing python packages

* You will get some errors in the console, we need to install `pandas` and `plotly`


<font color="red">ModuleNotFoundError: No module named 'pandas'</font>

<font color="red">ModuleNotFoundError: No module named 'plotly'</font>

* Click on the terminal tab and pip install the two packages

![](images/pip-install.png)

## Installing python packages

<pre>
pip install pandas
pip install plotly
</pre>

* With RStudio, it's often the case that you have to restart the session after install Python packages.

## Reading in the data

* Run the first code chunk again, it should run fine this time around
* You will see some objects and values in your Environment (top right panel)

![](images/environment.png)
![](images/restart-session.png)

## Data inspection

* Click on `df` to open the data frame. Find a peer to discuss the following questions

   1. What are the variables in the data?
   1. What are the observations (what is a row)?
   1. Can you tell what the values are for the different variables?
   
## Thinking of questions

* Now that we know what the data look like, discuss these questions:

  1. What types of questions can you answer with these data?
  1. Do you have any hypotheses for what the answers might be?
  

## Planning the visualizations  
  
* Let's think about how we can map variables to different elements of a plot

X and Y axes

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
library(tidyverse)
df <- tibble(x = runif(100, min=0, max=100),
             y = runif(100, min=0, max=100),
             size = runif(100, min=0, max=100),
             group = rep(c("group 1", "group 2"), 50))
df %>% 
  ggplot(aes(x = x, y = y)) + 
theme(axis.text.x=element_blank(), 
      axis.ticks.x=element_blank(), 
      axis.text.y=element_blank(), 
      axis.ticks.y=element_blank()) 
```

## Planning the visualizations  
  
* Let's think about how we can map variables to different elements of a plot

Groups to color:

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
library(ggthemes)
df %>% 
  ggplot(aes(x = x, y = y, color = group)) + 
  geom_point(size = 3) +
  theme(axis.text.x=element_blank(), 
      axis.ticks.x=element_blank(), 
      axis.text.y=element_blank(), 
      axis.ticks.y=element_blank()) +
  scale_color_colorblind()
```

## Planning the visualizations  
  
* Let's think about how we can map variables to different elements of a plot

Groups to facets:

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
library(ggthemes)
df %>% 
  ggplot(aes(x = x, y = y)) + 
  geom_point(size = 3) +
  theme(axis.text.x=element_blank(), 
      axis.ticks.x=element_blank(), 
      axis.text.y=element_blank(), 
      axis.ticks.y=element_blank()) +
  scale_color_colorblind() +
  facet_wrap(~group)
```

## Plotting the data

* Let's add another python chunk to the code. We will map `year` to `x` and `total` to `y`. Our geometry (how the data is drawn on the plot) will be dots, so we will use `px.scatter()`

```{python}
#| eval: true
#| echo: true
px.scatter(  
  df, x="year", y="total"
) 
```

## Plotting the data

* What are we missing? Maybe we can add an element for the `park` variable. Let's try `color`

```{python}
#| eval: true
#| echo: true
px.scatter(  
  df, x="year", y="total",
  color="park"
) 
```

## Filtering the data

* We don't have complete data for 2024. Let's filter 2024 out by using `.loc[]` on our data frame

```{python}
#| eval: true
#| echo: true
df = df.loc[df["year"] != 2024]
```


## Faceting

With columns:

```{python}
#| eval: true
#| echo: true
px.scatter(  
  df.loc[df["year"] != 2024], x="year", y="total",
  color="park", facet_col="park"
) 
```


## Faceting

With rows:

```{python}
#| eval: true
#| echo: true
px.scatter(  
  df.loc[df["year"] != 2024], x="year", y="total",
  color="park", facet_row="park"
) 
```

## Filtering

* Let's look at just one year (let's filter the data again)

```{python}
#| eval: true
#| echo: true
px.scatter(  
  df.loc[df["year"] == 2023], x="month", y="visitors", 
  facet_col="park"
) 
```

## Animation

* We can use animation, so we can slide through the years

```{python}
#| eval: true
#| title: Number of visitors accross months for each year
px.scatter(  
  df, x="month", y="visitors", 
  color="park", animation_group="month",
  animation_frame="year",
) 
```

## Scales

* The scale changes over the years, let's make it so it's always the same

```{python}
px.scatter(  
  df, x="month", y="visitors", 
  color="park", animation_group="month",
  animation_frame="year",
  range_y=[0,1000000] 
) 
```

## Line plots

* Let's change the dots to a line, so we will use `px.line` instead

```{python}
px.line(  
  df, x="month", y="visitors", 
  color="park", animation_group="month",
  animation_frame="year",
  range_y=[0,1000000] 
) 
```

# Layout

* Add a title to our plot by adding `#| title: Number of visitors accross months for each year` to the top of the chunk
* Add `author` to yaml header
* Add `## Row {height=50%}`

Read [the documentation](https://quarto.org/docs/dashboards/layout.html) for more info

