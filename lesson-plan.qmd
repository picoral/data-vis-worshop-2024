---
title: "Women's Hackathon 2024"
subtitle: "Data Visualization -- dashboards"
format:
  html:
    embed-resources: false
---

# Set up

## Posit Cloud

* Go to [the GitHub repo](https://github.com/picoral/wh2024-data-vis)
* Click on the green `Code` button and copy the `SSH` url

![](images/ssh-github.png)

* Sign in into [posit.cloud](https://posit.cloud/)
* Click on `New Project` and choose `New Project from Git Repository`

![](images/new-project.png)
* Once the project opens, click on the `np-dashboard.qmd` file to open the quarto dashboard source code. The list of files is in the lower right panel:

![](images/open-qmd.png)
* Click on the green `run` button on the top right corner of the first code chunk:

![](images/run.png)

* A window will pop up to install some Python packages. Click on `Yes`

![](images/install-python.png)

* You will get some errors in the console, we need to install `pandas` and `plotly`


<font color="red">ModuleNotFoundError: No module named 'pandas'</font>

<font color="red">ModuleNotFoundError: No module named 'plotly'</font>

* Click on the terminal tab and pip install the two packages

![](images/pip-install.png)

<pre>
pip install pandas
pip install plotly
</pre>

* With RStudio, it's often the case that you have to restart the session after install Python packages.

![](images/restart-session.png)
* Run the first code chunk again, it should run fine this time around
* You will see some objects and values in your Environment (top right panel)

![](images/environment.png)

# Data inspection

* Click on `df` to open the data frame. Find a peer to discuss the following questions

   1. What are the variables in the data?
   1. What are the observations (what is a row)?
   1. Can you tell what the values are for the different variables?
   
* Now that we know what the data look like, discuss these questions:

  1. What types of questions can you answer with these data?
  1. Do you have any hypotheses for what the answers might be?
  
* Let's think about how we can map variables to different elements of a plot

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
library(tidyverse)
df <- tibble(x = c(1:10), y = c(1:10))
df %>% 
  ggplot(aes(x = x, y = y)) + 
theme(axis.text.x=element_blank(), 
      axis.ticks.x=element_blank(), 
      axis.text.y=element_blank(), 
      axis.ticks.y=element_blank()) 
```

# Plotting the data

* Let's add another python chunk to the code. We will map `year` to `x` and `total` to `y`. Our geometry (how the data is drawn on the plot) will be dots, so we will use `px.scatter()`

```{python}
#| echo: false
#| eval: true
#| warning: false
#| message: false
import pandas as pd
import plotly.express as px
df = pd.read_csv("tidy-data/national_parks_data.csv")
```


```{python}
px.scatter(  
  df, x="year", y="total"
) 
```

* What are we missing? Maybe we can add an element for the `park` variable. Let's try `color`

```{python}
px.scatter(  
  df, x="year", y="total",
  color="park"
) 
```

* We don't have complete data for 2024. Let's filter 2024 out by using `.loc[]` on our data frame

```{python}
df = df.loc[df["year"] != 2024]
px.scatter(  
  df, x="year", y="total",
  color="park"
) 
```

* We can also facet our plot:

```{python}
px.scatter(  
  df.loc[df["year"] != 2024], x="year", y="total",
  color="park", facet_col="park"
) 
```

```{python}
px.scatter(  
  df.loc[df["year"] != 2024], x="year", y="total",
  color="park", facet_row="park"
) 
```

* What does deforming the scales do for our perception of variation over time?
* Let's try a different plot, let's answer the following question: `How does the number of visitors change accross the months of the year?` - what is your prediction for this? (think before you plot)

```{python}
px.scatter(  
  df, x="month", y="visitors", 
  facet_col="park", color="year"
) 
```

* Why does the color scale look different for `year` than it looked for `park`?
* Let's look at just one year (let's filter the data again)

```{python}
px.scatter(  
  df.loc[df["year"] == 2023], x="month", y="visitors", 
  facet_col="park"
) 
```

* We can use animation, so we can slide through the years

```{python}
#| eval: true
#| title: Number of visitors accross months for each year
px.scatter(  
  df, x="month", y="visitors", 
  color="park", animation_group="month",
  animation_frame="year",
) 
```

* The scale changes over the years, let's make it so it's always the same

```{python}
px.scatter(  
  df, x="month", y="visitors", 
  color="park", animation_group="month",
  animation_frame="year",
  range_y=[0,1000000] 
) 
```

* Let's change the dots to a line, so we will use `px.line` instead

```{python}
px.line(  
  df, x="month", y="visitors", 
  color="park", animation_group="month",
  animation_frame="year",
  range_y=[0,1000000] 
) 
```

* We can add a title to our plot by adding `#| title: Number of visitors accross months for each year` to the top of the chunk


# Changing layout

* add `author` to yaml header
* add `## Row {height=50%}`

Read [the documentation](https://quarto.org/docs/dashboards/layout.html) for more info

# Altair

```{python}
#| eval: true
import altair as alt

df["month"] = df["month"].astype("category")
df["month"] = pd.Categorical(
    df["month"], categories=["JAN", "FEB", "MAR",
                             "APR", "MAY", "JUN",
                             "JUL", "AUG", "SEP",
                             "OCT", "NOV", "DEC"], ordered=True
)

year_slider = alt.binding_range(min=1979, max=2023, step=1, name="Year")
slider_selection = alt.selection_point(bind=year_slider, fields=['year'])

# make the chart
alt.Chart(df).mark_line().encode(
    x='month',
    #y='visitors',
    y = alt.Y('visitors', scale=alt.Scale(domain=[0, 1000000])),
    color='park',
).interactive().add_params(
    slider_selection
).transform_filter(
    slider_selection
).properties(title="Visitor Numbers")

```

